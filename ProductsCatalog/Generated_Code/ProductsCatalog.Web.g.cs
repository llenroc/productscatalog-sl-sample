//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProductsCatalog
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace ProductsCatalog.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.ComponentModel.DataAnnotations.Schema;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// The 'Category' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProductsCatalog.Web")]
    public sealed partial class Category : Entity
    {
        
        private int _categoryId;
        
        private string _description;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Category"/> class.
        /// </summary>
        public Category()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(Description="Id of category", Name="ID")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int CategoryId
        {
            get
            {
                return this._categoryId;
            }
            set
            {
                if ((this._categoryId != value))
                {
                    this.OnCategoryIdChanging(value);
                    this.ValidateProperty("CategoryId", value);
                    this._categoryId = value;
                    this.RaisePropertyChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Description of products category", Name="Description")]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Name of products category", Name="Name")]
        [Required(ErrorMessage="Category name must not be empty!")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._categoryId;
        }
    }
    
    /// <summary>
    /// The 'Product' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/ProductsCatalog.Web")]
    public sealed partial class Product : Entity
    {
        
        private EntityRef<Category> _category;
        
        private int _categoryId;
        
        private string _description;
        
        private string _name;
        
        private double _price;
        
        private int _productId;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCategoryIdChanging(int value);
        partial void OnCategoryIdChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPriceChanging(double value);
        partial void OnPriceChanged();
        partial void OnProductIdChanging(int value);
        partial void OnProductIdChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Product"/> class.
        /// </summary>
        public Product()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Category"/> entity.
        /// </summary>
        [Association("Category_Product", "CategoryId", "CategoryId", IsForeignKey=true)]
        [Display(Description="Category of product", Name="Category")]
        public Category Category
        {
            get
            {
                if ((this._category == null))
                {
                    this._category = new EntityRef<Category>(this, "Category", this.FilterCategory);
                }
                return this._category.Entity;
            }
            set
            {
                Category previous = this.Category;
                if ((previous != value))
                {
                    this.ValidateProperty("Category", value);
                    if ((value != null))
                    {
                        this.CategoryId = value.CategoryId;
                    }
                    else
                    {
                        this.CategoryId = default(int);
                    }
                    this._category.Entity = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryId' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Category of product", Name="Category")]
        [Required(ErrorMessage="Category must be selected!")]
        [RoundtripOriginal()]
        public int CategoryId
        {
            get
            {
                return this._categoryId;
            }
            set
            {
                if ((this._categoryId != value))
                {
                    this.OnCategoryIdChanging(value);
                    this.RaiseDataMemberChanging("CategoryId");
                    this.ValidateProperty("CategoryId", value);
                    this._categoryId = value;
                    this.RaiseDataMemberChanged("CategoryId");
                    this.OnCategoryIdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Description of product", Name="Description")]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Name of product", Name="Name")]
        [Required(ErrorMessage="Product name must not be empty!")]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Price' value.
        /// </summary>
        [DataMember()]
        [Display(Description="Price of product", Name="Price")]
        [Required(ErrorMessage="Product price name must not be empty!")]
        public double Price
        {
            get
            {
                return this._price;
            }
            set
            {
                if ((this._price != value))
                {
                    this.OnPriceChanging(value);
                    this.RaiseDataMemberChanging("Price");
                    this.ValidateProperty("Price", value);
                    this._price = value;
                    this.RaiseDataMemberChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ProductId' value.
        /// </summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [DataMember()]
        [Display(Description="Id of product", Name="Id")]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int ProductId
        {
            get
            {
                return this._productId;
            }
            set
            {
                if ((this._productId != value))
                {
                    this.OnProductIdChanging(value);
                    this.ValidateProperty("ProductId", value);
                    this._productId = value;
                    this.RaisePropertyChanged("ProductId");
                    this.OnProductIdChanged();
                }
            }
        }
        
        private bool FilterCategory(Category entity)
        {
            return (entity.CategoryId == this.CategoryId);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._productId;
        }
    }
}
namespace ProductsCatalog.Web.Services
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using ProductsCatalog.Web;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'ProductsCatalogService' DomainService.
    /// </summary>
    public sealed partial class ProductsCatalogContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogContext"/> class.
        /// </summary>
        public ProductsCatalogContext() : 
                this(new WebDomainClient<IProductsCatalogServiceContract>(new Uri("ProductsCatalog-Web-Services-ProductsCatalogService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The ProductsCatalogService service URI.</param>
        public ProductsCatalogContext(Uri serviceUri) : 
                this(new WebDomainClient<IProductsCatalogServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductsCatalogContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public ProductsCatalogContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Category"/> entity instances that have been loaded into this <see cref="ProductsCatalogContext"/> instance.
        /// </summary>
        public EntitySet<Category> Categories
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Category>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Product"/> entity instances that have been loaded into this <see cref="ProductsCatalogContext"/> instance.
        /// </summary>
        public EntitySet<Product> Products
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Product>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Category"/> entity instances using the 'GetCategories' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Category"/> entity instances.</returns>
        public EntityQuery<Category> GetCategoriesQuery()
        {
            this.ValidateMethod("GetCategoriesQuery", null);
            return base.CreateQuery<Category>("GetCategories", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Product"/> entity instances using the 'GetProducts' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Product"/> entity instances.</returns>
        public EntityQuery<Product> GetProductsQuery()
        {
            this.ValidateMethod("GetProductsQuery", null);
            return base.CreateQuery<Product>("GetProducts", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new ProductsCatalogContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'ProductsCatalogService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IProductsCatalogServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCategories' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductsCatalogService/GetCategoriesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductsCatalogService/GetCategories", ReplyAction="http://tempuri.org/ProductsCatalogService/GetCategoriesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCategories(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCategories'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCategories'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCategories' operation.</returns>
            QueryResult<Category> EndGetCategories(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetProducts' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductsCatalogService/GetProductsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductsCatalogService/GetProducts", ReplyAction="http://tempuri.org/ProductsCatalogService/GetProductsResponse")]
            [WebGet()]
            IAsyncResult BeginGetProducts(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetProducts'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetProducts'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetProducts' operation.</returns>
            QueryResult<Product> EndGetProducts(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/ProductsCatalogService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/ProductsCatalogService/SubmitChanges", ReplyAction="http://tempuri.org/ProductsCatalogService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class ProductsCatalogContextEntityContainer : EntityContainer
        {
            
            public ProductsCatalogContextEntityContainer()
            {
                this.CreateEntitySet<Category>(EntitySetOperations.All);
                this.CreateEntitySet<Product>(EntitySetOperations.All);
            }
        }
    }
}
